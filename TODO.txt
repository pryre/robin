./src/safety.c:		} else if( !( _system_status.mode & MAV_MODE_FLAG_DECODE_POSITION_GUIDED ) ) {	//TODO: Check this error message works correctly
./src/safety.c:		if( ( _system_status.sensors.imu.health != SYSTEM_HEALTH_OK ) ) {	//Emergency //TODO: More?
./src/sensors.c:	//TODO: Check other status
./src/sensors.c:	//TODO: May need to offset these so they don't all check at once(?)
./src/sensors.c://TODO: This does not take into account temperature
./src/sensors.c:				//TODO: "we could do some sanity checking here if we wanted to."
./src/sensors.c:			//TODO CAL MAG
./src/sensors.c:			//TODO: CAL BARO
./src/sensors.c:			//TODO: CAL RC
./src/sensors.c:					//==-- //TODO: bias = (sum - (temp_comp*temp_sum)) / count
./src/sensors.c:					//TODO: "we could do some sanity checking here if we wanted to."
./src/sensors.c:			//TODO
./src/sensors.c:	//TODO: Remember not to expect all sensors to be ready
./src/sensors.c:	//TODO: value = (raw - BIAS - (EMP_COMP * TEMP)) * scale
./src/sensors.c:	//TODO: This should be aware of failures
./src/mavlink_system.c:	uint16_t errors_comm = 0;	//TODO: Make an alert to say if the UART overflows
./src/mavlink_system.c:	//TODO: We should have params for enabling specific sensors
./src/mavlink_system.c:	//TODO: Other sensors?
./src/mavlink_system.c:	//TODO: Need to add temp, pressure measurements
./src/mavlink_system.c:	//TODO: This could be done better
./src/mavlink_system.c:	//TODO: Update capabilities
./src/mavlink_system.c:									   0x10c4,	//TODO: This is the serial vendor and product ID, should be dynamic?
./src/mavlink_receive.c:							} else if( safety_request_state( MAV_STATE_CALIBRATING ) && ( _sensor_calibration.type == SENSOR_CAL_NONE ) ) { //TODO: Note about only doing 1 calibration at a time
./src/mavlink_receive.c:								}	//TODO: Make sure these are all up to date (some have different values now!)
./src/mavlink_receive.c:						case MAV_CMD_COMPONENT_ARM_DISARM: {	//TODO: For some reason this doesn't return an acceptable result
./src/mavlink_receive.c:						//TODO: Handle other cases?
./src/mavlink_receive.c:						//TODO: Check timestamp was recent before accepting
./src/mavlink_receive.c:					//TODO: Check timestamp was recent before accepting
./src/mavlink_receive.c:					//TODO: Should be in safety_check()?
./src/mavlink_receive.c:					//TODO: Error?
./src/mavlink_receive.c:	//TODO: Update global packet drops counter
./src/main.c:	//TODO: XXX: There will be a timer rollover at ~70 minutes of operation, will cause some issues
./src/main.c:	//sensors_poll();	//TODO: Good time to check other sensors for more raw data
./src/main.c:						//TODO: This should alert sensors_read() somhow to let it know there's more data to wait for
./src/main.c:	sensors_update( micros() );	//XXX: This takes ~230us with just IMU //TODO: Recalc
./src/estimator.c:		yaw_c.y = _fc_1;	//TODO: This should be aligned with NED and Compass North: yaw_c = [-sin(yaw), cos(yaw), 0.0f] XXX: MAYBE!;
./src/estimator.c:		reset_adaptive_gyro_bias();	//TODO: XXX: The adaptive bias' are good, but without proper mag support, they cause lasting errors if the mav is turned upside down
./src/mixer.c://TODO: Maybe this logic should be checked elsewhere?
./src/mixer.c://TODO: Is this even needed? (Tricopters)
./src/mixer.c:	value = int32_constrain(value, -500, 500) + 1500;	//TODO: Make and use servo_min, servo_max, and servo_mid an actual parameter
./src/mixer.c:	write_output_pwm(index, value, 1500);	//TODO: Failsafe param here as well
./src/mixer.c:		//TODO: This logic needs to be double checked
./src/mixer.c://TODO: Need to do fix16 operations in this section
./src/mixer.c:		//TODO: This logic needs to be double checked
./src/mixer.c:			//TODO: This might actually be very easy to do with fix16 matrix operations...
./src/mixer.c:	//TODO: Need to check if this still holds
./src/controller.c:			 get_param_fix16(PARAM_MAX_ROLL_RATE));	//TODO: This should be something else, percentage throttle maybe?
./src/controller.c:			 get_param_fix16(PARAM_MAX_PITCH_RATE));	//TODO: This should be something else, percentage throttle maybe?
./src/controller.c:			 get_param_fix16(PARAM_MAX_YAW_RATE));	//TODO: This should be something else, percentage throttle maybe?
./src/controller.c:		e_R_z_sin = 0;	//TODO: XXX: Seems to fix issues somewhere
./src/controller.c:		//px4: feed forward yaw setpoint rate	//TODO:?
./src/controller.c:		//TODO: Make a very clear note about this
